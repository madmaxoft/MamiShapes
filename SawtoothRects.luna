-- Generates SVG files for rectangles of "sawteeth"





--- Size of a single "sawtooth", in pixels:
local scale = 50

--- Width of the lines, in pixels:
local strokeWidth = 5

--- Specific sizes to generate, in addition to the regular (5 - 10) x (4 - 8)
local explicitSizes =
{
	{ 25, 10},
}





-- Generates the path of the rectangular frame of the specified width and height (measured in count of bubbles)
local function generateRectangleFrame(aWid, aHei)
	local res = {}
	local n = 1
	local function add(txt)
		res[n] = txt
		n = n + 1
	end
	local fmt = string.format

	-- Top edge:
	add(fmt("<path d=\"M %f %f A %f %f 0 1 1 %f %f",
		scale, scale * 1.5,
		scale / 2, scale / 2,
		scale * 1.5, scale
	))
	for w = 1, aWid do
		add(fmt("A %f %f 0 1 1 %f %f",
			scale / 2, scale / 2,
			(w + 1.5) * scale, scale
		))
	end

	-- Right edge:
	local right = (aWid + 2) * scale
	add(fmt("A %f %f 0 1 1 %f %f",
		scale / 2, scale / 2,
		right, scale * 1.5
	))
	for h = 1, aHei do
		add(fmt("A %f %f 0 1 1 %f %f",
			scale / 2, scale / 2,
			right, (h + 1.5) * scale
		))
	end

	-- Bottom edge:
	local bottom = (aHei + 2) * scale
	add(fmt("A %f %f 0 1 1 %f %f",
		scale / 2, scale / 2,
		(aWid + 1.5) * scale, bottom
	))
	for w = 1, aWid do
		add(fmt("A %f %f 0 1 1 %f %f",
			scale / 2, scale / 2,
			(aWid - w + 1.5) * scale, bottom
		))
	end

	-- Left edge:
	add(fmt("A %f %f 0 1 1 %f %f",
		scale / 2, scale / 2,
		scale, (aHei + 1.5) * scale
	))
	for h = 1, aHei do
		add(fmt("A %f %f 0 1 1 %f %f",
			scale / 2, scale / 2,
			scale, (aHei - h + 1.5) * scale
		))
	end

	add("\" fill=\"none\" stroke=\"black\" stroke-width=\"" .. strokeWidth .. "\"/>")
	return table.concat(res)
end





--- Writes a single rectangle's SVG code into a file, based on the dimensions given
local function writeRect(aWid, aHei)
	local f = assert(io.open(string.format("sawtoothrect-%02d-%02d.svg", aWid, aHei), "w"))
	f:write([[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="]])
	f:write((aWid + 3) * scale)
	f:write([[" height="]])
	f:write((aHei + 3) * scale)
	f:write([[">\n]])
	f:write(generateRectangleFrame(aWid, aHei))
	f:write("\n</svg>")
	f:close()
end





-- Main generating loop
for _, size in ipairs(explicitSizes) do
	writeRect(size[1], size[2])
end
for wid = 5, 10 do
	for hei = 4, 8 do
		writeRect(wid, hei)
	end
end
